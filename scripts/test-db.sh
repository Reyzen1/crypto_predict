#!/bin/bash
# File: scripts/test-db.sh
# Test database connection and models

set -e

echo "üß™ Testing Database Connection and Models"
echo "========================================"

# Check if we're in the right directory
if [ ! -d "backend" ]; then
    echo "‚ùå Backend directory not found! Please run from project root."
    exit 1
fi

cd backend

# Activate virtual environment
if [ -f "venv/Scripts/activate" ]; then
    echo "üîß Activating virtual environment (Windows)..."
    source venv/Scripts/activate
elif [ -f "venv/bin/activate" ]; then
    echo "üîß Activating virtual environment (Linux/Mac)..."
    source venv/bin/activate
else
    echo "‚ùå Virtual environment not found!"
    echo "Please run: ./scripts/quick-setup.sh first"
    exit 1
fi

# Set environment variables
export DATABASE_URL="postgresql://postgres:postgres123@localhost:5432/cryptopredict"
export REDIS_URL="redis://localhost:6379/0"

# Test database connection
echo "üîç Testing database connection..."
python -c "
import sys
try:
    from app.core.database import engine, SessionLocal
    
    # Test connection
    with engine.connect() as conn:
        result = conn.execute('SELECT 1 as test')
        print('‚úÖ Database connection successful!')
        
    # Test session
    db = SessionLocal()
    db.execute('SELECT 1')
    db.close()
    print('‚úÖ Database session working!')
    
except Exception as e:
    print(f'‚ùå Database connection failed: {e}')
    sys.exit(1)
"

# Test model imports
echo "üîç Testing model imports..."
python -c "
import sys
try:
    from app.models import User, Cryptocurrency, PriceData, Prediction, Portfolio
    print('‚úÖ All models imported successfully!')
    
    # Test model attributes
    print(f'‚úÖ User model: {User.__tablename__}')
    print(f'‚úÖ Cryptocurrency model: {Cryptocurrency.__tablename__}')
    print(f'‚úÖ PriceData model: {PriceData.__tablename__}')
    print(f'‚úÖ Prediction model: {Prediction.__tablename__}')
    print(f'‚úÖ Portfolio model: {Portfolio.__tablename__}')
    
except Exception as e:
    print(f'‚ùå Model import failed: {e}')
    sys.exit(1)
"

# Test table creation
echo "üîç Testing table creation..."
python -c "
import sys
try:
    from app.core.database import engine, Base
    import app.models
    
    # Create tables
    Base.metadata.create_all(bind=engine)
    print('‚úÖ Tables created successfully!')
    
    # Check if tables exist
    from sqlalchemy import text
    with engine.connect() as conn:
        result = conn.execute(text(\"SELECT table_name FROM information_schema.tables WHERE table_schema='public'\"))
        tables = [row[0] for row in result]
        
        expected_tables = ['users', 'cryptocurrencies', 'price_data', 'predictions', 'portfolios']
        for table in expected_tables:
            if table in tables:
                print(f'‚úÖ Table {table} exists')
            else:
                print(f'‚ùå Table {table} missing')
                sys.exit(1)
    
except Exception as e:
    print(f'‚ùå Table creation failed: {e}')
    sys.exit(1)
"

# Test data insertion
echo "üîç Testing data operations..."
python -c "
import sys
try:
    from app.core.database import SessionLocal
    from app.models import Cryptocurrency
    
    db = SessionLocal()
    
    # Test insert
    test_crypto = Cryptocurrency(
        symbol='TEST',
        name='Test Coin',
        coingecko_id='test-coin',
        binance_symbol='TESTUSDT'
    )
    
    db.add(test_crypto)
    db.commit()
    print('‚úÖ Data insertion successful!')
    
    # Test query
    result = db.query(Cryptocurrency).filter(Cryptocurrency.symbol == 'TEST').first()
    if result:
        print(f'‚úÖ Data query successful: {result.name}')
    else:
        print('‚ùå Data query failed')
        sys.exit(1)
    
    # Clean up test data
    db.delete(result)
    db.commit()
    print('‚úÖ Data deletion successful!')
    
    db.close()
    
except Exception as e:
    print(f'‚ùå Data operations failed: {e}')
    sys.exit(1)
"

echo ""
echo "üéâ All Database Tests Passed!"
echo "============================"
echo ""
echo "‚úÖ Database connection working"
echo "‚úÖ Models imported correctly"
echo "‚úÖ Tables created successfully"
echo "‚úÖ Data operations working"
echo ""
echo "Database is ready for use!"

cd ..