# File: ./docker-compose.yml
# Docker Compose configuration for CryptoPredict MVP development environment
# Updated with complete services configuration

version: '3.8'

services:
  # PostgreSQL Database - Primary data storage
  postgres:
    image: postgres:15-alpine
    container_name: cryptopredict_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cryptopredict
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - cryptopredict_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cryptopredict"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache - For caching and session storage
  redis:
    image: redis:7-alpine
    container_name: cryptopredict_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - cryptopredict_network
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # FastAPI Backend - Main API service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: cryptopredict_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database connection
      - DATABASE_URL=postgresql://postgres:admin123@postgres:5432/cryptopredict
      # Redis connection
      - REDIS_URL=redis://redis:6379/0
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=true
      # Security settings
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      # External API keys (to be set in .env)
      - COINGECKO_API_KEY=${COINGECKO_API_KEY:-}
      - BINANCE_API_KEY=${BINANCE_API_KEY:-}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET:-}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-}
      # Rate limiting
      - RATE_LIMIT_PER_MINUTE=60
      - RATE_LIMIT_PER_HOUR=1000
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - cryptopredict_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend - User interface
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: cryptopredict_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      # API endpoints
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      # Application settings
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - cryptopredict_network
    command: npm run dev

  # PgAdmin - Database administration (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cryptopredict_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cryptopredict.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - cryptopredict_network

  # Redis Commander - Redis administration (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cryptopredict_redis_commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - cryptopredict_network

# Persistent volumes for data storage
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_logs:
    driver: local

# Custom network for service communication
networks:
  cryptopredict_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16